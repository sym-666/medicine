#pragma once

// @generated by torchgen/gen.py from Operator.h

#include <string_view>
#include <tuple>
#include <vector>

// Forward declarations of any types needed in the operator signatures.
// We can't directly include these classes because it will cause circular include dependencies.
// This file is included by TensorBody.h, which defines the Tensor class.
#include <ATen/core/ATen_fwd.h>

namespace at {
namespace _ops {


struct TORCH_API sym_is_contiguous {
  using schema = c10::SymBool (const at::Tensor &, at::MemoryFormat);
  using ptr_schema = schema*;
  // See Note [static constexpr char* members for windows NVCC]
  static constexpr const char* name = "aten::sym_is_contiguous";
  static constexpr const char* overload_name = "";
  static constexpr const char* schema_str = "sym_is_contiguous(Tensor self, MemoryFormat memory_format=contiguous_format) -> SymBool";
  static c10::SymBool call(const at::Tensor & self, at::MemoryFormat memory_format);
  static c10::SymBool redispatch(c10::DispatchKeySet dispatchKeySet, const at::Tensor & self, at::MemoryFormat memory_format);
};

}} // namespace at::_ops
